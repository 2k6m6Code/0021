###############################################################################################
#                                           Syslog Management Console
###############################################################################################
require ("/usr/local/apache/qb/language/qblanguage.cgi");
@qblang = QBlanguage();
sub showSyslog 
{
    my (%action)=@_;
    my $syslog=XMLread($gINITPATH.'syslog.xml');
    #generating presentation format in TABLE 
    print qq (<table cellspacing="0" border="0">\n);
    print qq (<tr><td align="center" class="bigtitle" colspan="2">External Log Server); #</td></tr>);
    print qq (<a href="javascript:qbShowHelp('syslog')"><image src="image/help.gif" border="0" title="Help"></a></td></tr>);
    
    print qq (<tr><td colspan="2"><hr size="1"></td></tr>);

    #****************************************************************************************
    
    print qq (<tr style="display:none;">);
    print qq (<td class="body"  valign="top" align="left">);
    print qq ($qblang[464]);
    print qq (</td>);
    print qq (<td class="body"  valign="top" align="left">);
    my $status=( $syslog->{serverlog} ) ? ('checked') : (''); 
    print qq (<INPUT type="checkbox" name="serverlog"  $status >); 
    print qq (</td>);
    print qq (</tr>);  
  
    #****************************************************************************************
    print qq (<tr style="display:none;">);
    print qq (<td class="body"  valign="top" align="left">);
    print qq ($qblang[465]);
    print qq (</td>);
    print qq (<td class="body"  valign="top" align="left">);
    my $status=( $syslog->{kernellog} ) ? ('checked') : (''); 
    print qq (<INPUT type="checkbox" name="kernellog" $status >);
    print qq (</td>);
    print qq (</tr>); 
 
    #****************************************************************************************
    print qq (<tr style="display:none;">);
    print qq (<td class="body"  valign="top" align="left">);
    print qq ($qblang[466]);
    print qq (</td>);
    print qq (<td class="body"  valign="top" align="left">);
    my $status=( $syslog->{squidlog} ) ? ('checked') : (''); 
    print qq (<INPUT type="checkbox" name="squidlog" $status >);
    print qq (</td>);
    print qq (</tr>); 
 
    #****************************************************************************************
    print qq (<tr style="display:none;">);
    print qq (<td class="body"  valign="top" align="left">);
    print qq ($qblang[467]);
    print qq (</td>);
    print qq (<td class="body"  valign="top" align="left">);
    my $status=( $syslog->{locallog} ) ? ('checked') : (''); 
    print qq (<INPUT type="checkbox" name="locallog"  $status >);
    print qq (</td>);
    print qq (</tr>); 
    
    #****************************************************************************************
    print qq (<tr>);
    print qq (<td class="body"  valign="top" align="left">);
    print qq ($qblang[468]);
    print qq (</td>);
    print qq (<td class="body"  valign="top" align="left">);
    my $status=( $syslog->{syslogserver} ) ? ('checked') : (''); 
    print qq (<INPUT type="checkbox" name="syslogserver"  $status onClick="switchSyslogServerIP()">);
    print qq (<INPUT type="text" maxlength="15" class="qbtext" name="syslogserverip" value="$syslog->{syslogserverip}" onChange="checkAndSetSyslogServerIP()">);
    print qq (</td>);
    print qq (</tr>); 

    #****************************************************************************************
    print qq (<tr>);
    print qq (<td class="body"  valign="top" align="left">);
    print qq ($qblang[469]);
    print qq (</td>);
    print qq (<td class="body"  valign="top" align="left">);
    my $status=( $syslog->{ftpserver} ) ? ('checked') : (''); 
    print qq (<INPUT type="checkbox" name="ftpserver"  $status onClick="switchFTPServerIP()">);
    #print qq (<INPUT type="checkbox" name="ftpserver"  $status >);
    #print qq (<INPUT type="text" maxlength="15" class="qbtext" name="ftpserverip" value="$syslog->{ftpserverip}" onChange="checkAndSetFTPServerIP()">);
    print qq (<INPUT type="text" class="qbtext" name="ftpserverip" value="$syslog->{ftpserverip}" >);
    print qq (</td>);
    print qq (</tr>); 
=cut
    #****************************************************************************************
    print qq (<tr>);
    print qq (<td class="body"  valign="top" align="left">);
    print qq ($qblang[470]);
    print qq (</td>);
    print qq (<td class="body"  valign="top" align="left">);
    print qq (<select class="qbopt" name="syslogdev" style="width:150">\n);
    
    my $deviceinfo=runCommand(command=>"ls", params=>'/dev/.udev/db/block@sd*');
    my @devicerecord=split(/\n/, $deviceinfo);
    my $partitioninfo=runCommand(command=>"cat", params=>'/proc/partitions');
    my @partitionrecord=split(/\n/, $partitioninfo);
    my @devicelist;
    my @partitionlist;
    my @deviceinfolist;

    #20100415 Brian To collect USB Device info.
    foreach my $record ( @partitionrecord )
    {
        if ( $record =~m/(sd[a-z]\d+)/)
        {
           my $Vendor_record;
           my $Model_record;
           my $Rev_record;
           my @devicedata=split(/\s+/, $record);
           my $partition=$devicedata[4];
           $devicedata[4] =~s/(\d+)//g;
           my $Deviceinfo=runCommand(command=>"cat", params=>'/dev/.udev/db/block\@'.$devicedata[4].'\@'.$partition);
           my @deviceinforecord=split(/\n/, $Deviceinfo);
           foreach my $inforecord ( @deviceinforecord )
           {
             if ( grep(/ID_VENDOR/, $inforecord) )
             {
                $Vendor_record=$inforecord;
                $Vendor_record=~s/E:ID_VENDOR=//g;
             }
             if ( grep(/ID_MODEL/, $inforecord) )
             {
                $Model_record=$inforecord;
                $Model_record=~s/E:ID_MODEL=//g;
             }
             if ( grep(/ID_REVISION/, $inforecord) )
             {
                $Rev_record=$inforecord;
                $Rev_record=~s/E:ID_REVISION=//g;
             }
            }
           push ( @deviceinfolist, $Vendor_record.' '.$Model_record.' '.$Rev_record);
           push ( @partitionlist, $partition.' Size:'.$devicedata[3].'(KB)');
           push ( @devicelist, $partition);
        }
    }

    #20090717 Brian To collect IDE Device info.
    my $idedev=runCommand(command=>'cat', params=>qq('/tmp/idedev'\|awk \'\{print \$1\}\') );
    $idedev=~s/Dev://g;
    $idedev=~s/\n//g;
    my $idesize=runCommand(command=>'cat', params=>qq('/tmp/idedev'\|awk \'\{print \$2\}\') );
    my $ideinfo=runCommand(command=>'cat', params=>qq('/tmp/idedev'\|sed -e \"s\/Dev\.\*\.Name\://\") );

    my $devicelist_length=($#devicelist +1);
    print qq (<option value="0">None</option>/n);
    for ( $i = 0; $i<$devicelist_length; $i++)
    {
       my $status=($syslog->{syslogdev} eq $devicelist[$i]) ? ('selected'): ('');
       print qq (<option value="$devicelist[$i]" $status title="$deviceinfolist[$i]; $partitionlist[$i]">$deviceinfolist[$i]</option>/n);
    }

    my $status=($syslog->{syslogdev} eq $idedev) ? ('selected'): ('');
    if ( $idedev ne "" )
    {
    print qq (<option value="$idedev" $status title="$idedev $idesize(KB)">$ideinfo</option>/n);
    }
    print qq (</select><br>);
    print qq (</td>);
    print qq (</tr>);
=cut
    #****************************************************************************************
    print qq (<tr>);
    print qq (<td class="body"  valign="top" align="left">);
    print qq ($qblang[471]);
    print qq (</td>);
    print qq (<td class="body"  valign="top" align="left">);
    print qq (<INPUT type="text" class="qbtext" name="ftpusername" value="$syslog->{ftpusername}" style="width:150">);
    print qq (</td>);
    print qq (</tr>); 

    #****************************************************************************************
    print qq (<tr>);
    print qq (<td class="body"  valign="top" align="left">);
    print qq ($qblang[472]);
    print qq (</td>);
    print qq (<td class="body"  valign="top" align="left">);
    print qq (<INPUT type="password" class="qbtext" name="ftppassword" value="$syslog->{ftppassword}" style="width:150">);
    print qq (</td>);
    print qq (</tr>); 

    #****************************************************************************************
    print qq (<tr>);
    print qq (<td class="body"  valign="top" align="left">);
    print qq ($qblang[473]);
    print qq (</td>);
    print qq (<td class="body"  valign="top" align="left">);
    print qq (<INPUT type="text" title="Support one layer directory can be created automatically!!! For example:If you type  /aaa/bbb/ccc ,qb will create a directory ccc in /aaa/bbb,then upload config file to /aaa/bbb/ccc/" class="qbtext" name="ftpdir" value="$syslog->{ftpdir}" style="width:150">);
    print qq (</td>);
    print qq (</tr>); 

    #****************************************************************************************
    print qq (<tr>);
    print qq (<td class="body"  valign="top" align="left">);
    print qq ($qblang[474]);
    print qq (</td>);
    print qq (<td><select class="qbopt"  name="ftpfrequency" style="width:150">);
    foreach my $count ( 1..24  ) 
    {  
       my $status=( "$count.hour" eq "$syslog->{ftpfrequency}" ) ? ('selected'):('');
       if ( $count eq "1" ){print qq (<option $status value="$count.hour">$count hour</option>);}
       else {print qq (<option $status value="$count.hour">$count hours</option>);}
    }
    foreach my $count ( 1..14  ) 
    {  
       my $status=( "$count.day" eq "$syslog->{ftpfrequency}" ) ? ('selected'):('');
       if ( $count eq "1" ){print qq (<option $status value="$count.day">$count day</option>);}
       else {print qq (<option $status value="$count.day">$count days</option>);}
    }
    foreach my $count ( 1..24  ) 
    {  
       my $status=( "$count.everyd" eq "$syslog->{ftpfrequency}" ) ? ('selected'):('');
       if ( $count < 13 ){print qq (<option $status value="$count.everyd">$count:00 AM everyday</option>);}
       else {print qq (<option $status value="$count.everyd">$count:00 PM everyday</option>);}
    }
    print qq (</select>);
    print qq (</td>);
    print qq (</tr>); 


    print qq (<tr><td colspan="2"><hr size="1"></td></tr>);

    
    #************************************ Command Button  ********************************************
    print qq (<tr>);
    print qq (<td colspan="2" align="center">);
    print qq (<input class="qb" type="button" value="$qblang[139]" title="Save All Parameters and apply now !" onClick="goSubmit('APPLY')" style="width:120">);
    #print qq (<input class="qb" type="button"  value="Go Back !"  title="Back To Log Analysis" onClick="goBackToLogAnalysis()" style="width:120">);
    print qq (</td></tr>);
 
    print qq (</table>);
}
#showConsole


#======================================================================================================================
sub syslogScript 
{
    print << "SCRIPT";

    <script language="javascript">

    var myform; 
    
    function cgi_dep_onload() 
    {
        myform=window.document.forms[0]; 
        switchSyslogServerIP();   
    }

    function switchSyslogServerIP()
    {
        myform.syslogserverip.disabled=( myform.syslogserver.checked ) ? (false) : (true);
        if (myform.syslogserver.checked)
        {
            myform.serverlog.checked=true;
            myform.kernellog.checked=true;
            myform.squidlog.checked=true;
            myform.locallog.checked=false;
        }else
        {
            myform.serverlog.checked=false;
            myform.kernellog.checked=false;
            myform.squidlog.checked=false;
            myform.locallog.checked=true;
        }
    }

    function switchFTPServerIP()
    {
        myform.ftpserverip.disabled=( myform.ftpserver.checked ) ? (false) : (true);
        if (myform.ftpserver.checked)
        {
            myform.serverlog.checked=true;
            myform.kernellog.checked=true;
            myform.squidlog.checked=true;
            myform.locallog.checked=false;
        }else
        {
            myform.serverlog.checked=false;
            myform.kernellog.checked=false;
            myform.squidlog.checked=false;
            myform.locallog.checked=true;
        }
    }

    function checkAndSetSyslogServerIP()
    {
        if ( !isValidIP(myform.syslogserverip.value) ) 
        { 
            myform.syslogserverip.value=""; 
            alert('IP format Error');
        }
    }

    function checkAndSetFTPServerIP()
    {
        if ( !isValidIP(myform.ftpserverip.value) ) 
        { 
            myform.ftpserverip.value=""; 
            alert('FTP IP format Error');
        }
    }

    function goBackToLogAnalysis()
    {
        window.top.mainFrame.location.href="loganalysis.cgi";
    }
    
    </script>
SCRIPT
}
#syslogScript


#======================================================================================================================
#maintainSyslog( %action )
sub maintainSyslog 
{
    my (%action)=@_;
    if ( !$action{action} ) { return; }
    my $syslog=XMLread($gINITPATH.'syslog.xml');

    if ( $action{action}=~m/^APPLY$/ ) 
    {
        $syslog->{syslogserver}=$action{syslogserver};
        $syslog->{syslogserverip}=$action{syslogserverip};
        $syslog->{ftpserver}=$action{ftpserver};
        $syslog->{ftpserverip}=$action{ftpserverip};
        $syslog->{syslogdev}=$action{syslogdev};
        $syslog->{ftpusername}=$action{ftpusername};
        $syslog->{ftppassword}=$action{ftppassword};
        $syslog->{ftpdir}=$action{ftpdir};
        $syslog->{ftpfrequency}=$action{ftpfrequency};
        $syslog->{serverlog}=$action{serverlog};
        $syslog->{kernellog}=$action{kernellog};
        $syslog->{squidlog}=$action{squidlog};
        $syslog->{locallog}=$action{locallog};
    }
    
    #-------updating syslog.xml------------------------ 
    XMLwrite($syslog, $gINITPATH."syslog.xml");

    #@dep
    runCommand(command=>'do_qbsyslog.pl', params=>'');

    #--------overwrite  syslog.xml from $gINIPATH  to  /mnt/qb/conf/syslog.xml
    runCommand(command=>'cp', params=>'-f '.$gINITPATH.'syslog.xml /mnt/qb/conf/syslog.xml');

    #================================================================================================
    # to make sure the writing to CF succefully, we have to sync for a certain times
    # sync the writing to CF
    qbSync();
    
    
    # kill klogd and syslogd
    #runCommand(command=>'killall', params=>'-9 klogd');
    #runCommand(command=>'killall', params=>'-9 syslogd');

    # restart klogd and syslogd
    #runCommand(command=>'klogd', params=>'');
    #runCommand(command=>'syslogd', params=>'');
    runCommand(command=>'service', params=>'syslog restart');
    
    LogUserAction( action=>'APPLYSYSLOGSERVER', serverlog=>$action{serverlog}, kernellog=>$action{kernellog}, squidlog=>$action{squidlog}, locallog=>$action{locallog}, syslogserver=>$action{syslogserver}, syslogserverip=>$action{syslogserverip}, ftpserver=>$action{ftpserver}, ftpserverip=>$action{ftpserverip}, syslogdev=>$action{syslogdev}, ftpusername=>$action{ftpusername}, ftppassword=>$action{ftppassword}, ftpdir=>$action{ftpdir}, ftpfrequency=>$action{frpfrequency} );
}
#maintainSyslog
#
1
